(function() {
  suite('Function Literals', function() {
    setup(function() {
      this.x = new CS.Identifier('x');
      return this.y = new CS.Identifier('y');
    });
    test('basic function literals', function() {
      eq('->', generate(new CS.Function([], null)));
      return eq('=>', generate(new CS.BoundFunction([], null)));
    });
    test('basic parameter lists', function() {
      eq('(x) ->', generate(new CS.Function([this.x], null)));
      return eq('(x, y) ->', generate(new CS.Function([this.x, this.y], null)));
    });
    test('basic function bodies', function() {
      return eq('-> x', generate(new CS.Function([], new CS.Block([this.x]))));
    });
    return test('less basic function bodies', function() {
      eq('->\n  x\n  y', generate(new CS.Function([], new CS.Block([this.x, this.y]))));
      return eq('(x, y) =>\n  x = (y; x)\n  x; y\n  x + y', generate(new CS.BoundFunction([this.x, this.y], new CS.Block([new CS.AssignOp(this.x, new CS.SeqOp(this.y, this.x)), new CS.SeqOp(this.x, this.y), new CS.PlusOp(this.x, this.y)]))));
    });
  });

}).call(this);
