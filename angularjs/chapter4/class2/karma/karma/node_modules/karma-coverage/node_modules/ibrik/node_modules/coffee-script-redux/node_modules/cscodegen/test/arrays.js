(function() {
  suite('Array Literals', function() {
    test('simple arrays', function() {
      eq('[]', generate(new CS.ArrayInitialiser([])));
      eq('[0]', generate(new CS.ArrayInitialiser([new CS.Int(0)])));
      return eq('[0, 1]', generate(new CS.ArrayInitialiser([new CS.Int(0), new CS.Int(1)])));
    });
    test('larger arrays', function() {
      return eq('[\n  aaaaaaaaaa\n  bbbbbbbbbb\n  cccccccccc\n  dddddddddd\n  eeeeeeeeee\n]', generate(new CS.ArrayInitialiser([new CS.Identifier('aaaaaaaaaa'), new CS.Identifier('bbbbbbbbbb'), new CS.Identifier('cccccccccc'), new CS.Identifier('dddddddddd'), new CS.Identifier('eeeeeeeeee')])));
    });
    test('function literals in arrays', function() {
      eq('[->]', generate(new CS.ArrayInitialiser([new CS.Function([])])));
      return eq('[(->), ->]', generate(new CS.ArrayInitialiser([new CS.Function([]), new CS.Function([])])));
    });
    return test('function application in arrays', function() {
      eq('[f a]', generate(new CS.ArrayInitialiser([new CS.FunctionApplication(new CS.Identifier('f'), [new CS.Identifier('a')])])));
      eq('[(f a), f b]', generate(new CS.ArrayInitialiser([new CS.FunctionApplication(new CS.Identifier('f'), [new CS.Identifier('a')]), new CS.FunctionApplication(new CS.Identifier('f'), [new CS.Identifier('b')])])));
      return eq('[\n  f a\n  f b\n  f c\n  f d\n]', generate(new CS.ArrayInitialiser([new CS.FunctionApplication(new CS.Identifier('f'), [new CS.Identifier('a')]), new CS.FunctionApplication(new CS.Identifier('f'), [new CS.Identifier('b')]), new CS.FunctionApplication(new CS.Identifier('f'), [new CS.Identifier('c')]), new CS.FunctionApplication(new CS.Identifier('f'), [new CS.Identifier('d')])])));
    });
  });

}).call(this);
