(function() {
  var child_process, coffee, compile, compiler, fs, libdir, path, root, srcdir, timeLog, watchers;

  fs = require('fs');

  path = require('path');

  child_process = require('child_process');

  root = path.join(__dirname, '..');

  coffee = require('coffee-script-redux');

  compiler = path.join(root, 'node_modules', '.bin', 'coffee');

  libdir = path.join(root, '' + process.argv[2]);

  srcdir = path.join(root, '' + process.argv[3]);

  watchers = [];

  if (!fs.watch) {
    console.error('fs.watch is not provided');
    process.exit(1);
  }

  timeLog = function(message) {
    return console.log("" + ((new Date).toLocaleTimeString()) + " - " + message);
  };

  compile = function(src, dst) {
    return child_process.exec("" + compiler + " -j < " + (JSON.stringify(src)) + " > " + (JSON.stringify(dst)), function(err) {
      return timeLog("compiled " + (path.relative(root, src)));
    });
  };

  fs.mkdir(libdir, function() {
    return fs.readdir(srcdir, function(err, files) {
      var file, refresh, _fn, _i, _len;
      _fn = function() {
        var dst, src;
        src = path.join(srcdir, file);
        dst = path.join(libdir, "" + (path.basename(file, '.coffee')) + ".js");
        return compile(src, dst);
      };
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        _fn();
      }
      refresh = function() {
        var watcher, _j, _len1;
        console.log('watch', srcdir);
        for (_j = 0, _len1 = watchers.length; _j < _len1; _j++) {
          watcher = watchers[_j];
          watcher.close();
        }
        return fs.readdir(srcdir, function(err, files) {
          var _k, _len2, _results;
          console.log(files);
          _results = [];
          for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
            file = files[_k];
            _results.push((function() {
              var dst, src;
              src = path.join(srcdir, file);
              dst = path.join(libdir, "" + (path.basename(file, '.coffee')) + ".js");
              watcher = fs.watch(src, function(event, filename) {
                console.log('starting...', event);
                if (event === 'change') {
                  return compile(src, dst);
                }
              });
              return watchers.push(watcher);
            })());
          }
          return _results;
        });
      };
      return refresh();
    });
  });

}).call(this);
